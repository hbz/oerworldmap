GET     /robots.txt                 controllers.Robots.get()
GET     /assets/json/context.json   controllers.Assets.at(path="/", file="context.json")
GET     /assets/*file               controllers.Assets.at(path="/public", file)
POST    /user/register              controllers.UserIndex.register()
GET     /user/verify                controllers.UserIndex.verify(token: String ?= null)
POST    /user/password/change       controllers.UserIndex.changePassword()
POST    /user/password/reset        controllers.UserIndex.resetPassword()
GET     /user/profile               controllers.UserIndex.profile()
GET     /user/newsletter            controllers.UserIndex.newsletterSignup()
POST    /user/newsletter            controllers.UserIndex.newsletterRegister()
GET     /user/groups                controllers.UserIndex.editGroups()
POST    /user/groups                controllers.UserIndex.setGroups()
GET     /resource/                  controllers.ResourceIndex.list(q: String ?= "", from: Integer ?= 0, size: Integer ?= 20, sort: String ?= null, features: Boolean ?= false, ext = null, iso3166: String ?= "", disposition = null)
GET     /resource.:ext              controllers.ResourceIndex.list(q: String ?= "", from: Integer ?= 0, size: Integer ?= 20, sort: String ?= null, features: Boolean ?= false, ext: String, iso3166: String ?= "", disposition: String ?= "attachment")
GET     /resource/$id<[^\./]+>      controllers.ResourceIndex.read(id: String, version: String ?= "HEAD", ext = null, disposition = null)
GET     /resource/$id<[^\./]+>.:ext controllers.ResourceIndex.read(id: String, version: String ?= "HEAD", ext: String, disposition: String ?= "attachment")
POST    /resource/                  controllers.ResourceIndex.addResource()
POST    /resource/:id               controllers.ResourceIndex.updateResource(id: String)
POST    /resource/:id/comment       controllers.ResourceIndex.commentResource(id: String)
POST    /import/                    controllers.ResourceIndex.importResources()
DELETE  /resource/:id               controllers.ResourceIndex.delete(id: String)
GET     /aggregation/               controllers.AggregationIndex.list()
GET     /feed/                      controllers.ResourceIndex.feed()
GET     /country/$iso3166<[^\./]+>  controllers.ResourceIndex.list(q: String ?= "", from: Integer ?= 0, size: Integer ?= 20, sort: String ?= null, features: Boolean ?= false, ext = null, iso3166: String, disposition = null)
GET     /country/$iso3166<[^\./]+>.:ext controllers.ResourceIndex.list(q: String ?= "", from: Integer ?= 0, size: Integer ?= 20, sort: String ?= null, features: Boolean ?= false, ext: String, iso3166: String, disposition: String ?= "attachment")
GET     /log/                       controllers.ResourceIndex.log(id: String = null, compare: String ?= null, to: String ?= null)
GET     /log/:id                    controllers.ResourceIndex.log(id: String, compare: String ?= null, to: String ?= null)
POST    /index/:id                  controllers.ResourceIndex.index(id: String)
GET     /sparql/query               controllers.Sparql.query(q: String ?= "")
GET     /sparql/update              controllers.Sparql.update(delete: String ?= "", insert: String ?= "", where: String ?= "")
POST    /sparql/patch               controllers.Sparql.patch()
GET     /label/:id                  controllers.ResourceIndex.label(id: String)
GET     /reconcile                  controllers.Reconciler.meta(callback: String ?=null)
POST    /reconcile                  controllers.Reconciler.reconcile()
